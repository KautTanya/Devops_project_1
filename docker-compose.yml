services:
  postgres:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5432:5432"
    networks:
      - my_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend_rds:
    build:
      context: ./backend_rds
    container_name: backend_rds
    ports:
      - "8000:8000"
    environment:
      DB_NAME: mydb
      DB_USER: myuser
      DB_PASSWORD: mypassword
      DB_HOST: postgres
      DB_PORT: 5432
      CORS_ALLOWED_ORIGINS: "http://d10uj8gvhr511h.cloudfront.net,http://localhost:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - my_network

  backend_redis:
    build:
      context: ./backend_redis
    container_name: backend_redis
    ports:
      - "8001:8000"
    environment:
      REDIS_HOST: redis_db
      REDIS_PORT: 6379
      CORS_ALLOWED_ORIGINS: "http://d10uj8gvhr511h.cloudfront.net,http://localhost:8001"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - my_network

  redis:
    image: redis:6.2
    container_name: redis_db
    ports:
      - "6379:6379"
    networks:
      - my_network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  my_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  